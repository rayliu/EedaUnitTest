package eeda.property;import static org.junit.Assert.assertTrue;import org.junit.After;import org.junit.Before;import org.junit.Test;import org.openqa.selenium.By;import org.openqa.selenium.WebDriver;import org.openqa.selenium.WebDriverBackedSelenium;import org.openqa.selenium.WebElement;import org.openqa.selenium.firefox.FirefoxDriver;import org.openqa.selenium.support.ui.ExpectedCondition;import org.openqa.selenium.support.ui.WebDriverWait;import com.thoughtworks.selenium.Selenium;import eeda.login.HomePage;import eeda.login.LoginPage;public class ClientPagesTest {	WebDriver driver;	private Selenium selenium;	@Before	public void setUp() throws Exception {		driver = new FirefoxDriver();		selenium = new WebDriverBackedSelenium(driver, "http://localhost:8080");	}	@Test	public void testList_DemoLogin() {		LoginPage signInPage = new LoginPage(selenium);		HomePage homePage = signInPage.loginValidUser("demo", "123456");		ClientListPage listPage = homePage.openPropertyClientList();		assertTrue(selenium.getLocation().equals("http://localhost:8080/propertyClient"));		assertTrue(selenium.isElementPresent("eeda-table"));	}	@Test	public void testList_ManagerLogin() {		LoginPage signInPage = new LoginPage(selenium);		HomePage homePage = signInPage.loginValidUser("jason", "123456");		ClientListPage listPage = homePage.openPropertyClientList();		assertTrue(selenium.getLocation().equals("http://localhost:8080/propertyClient"));	}	@Test	public void testNewAndSave() {		LoginPage signInPage = new LoginPage(selenium);		HomePage homePage = signInPage.loginValidUser("jason", "123456");		ClientListPage listPage = homePage.openPropertyClientList();		ClientPage clientPage = listPage.openNewClient();		clientPage.inputNewClientAndSave();		WebElement myDynamicElement = (new WebDriverWait(driver, 15)).until(new ExpectedCondition<WebElement>() {			public WebElement apply(WebDriver d) {				return d.findElement(By.id("eeda-table"));			}		});		assertTrue(myDynamicElement != null);	}	@Test	public void testManagerEditAndSave() {		LoginPage signInPage = new LoginPage(selenium);		HomePage homePage = signInPage.loginValidUser("jason", "123456");		ClientListPage listPage = homePage.openPropertyClientList();		ClientPage clientPage = listPage.openEditClient();		clientPage.inputClientAndSave();		WebElement myDynamicElement = (new WebDriverWait(driver, 15)).until(new ExpectedCondition<WebElement>() {			public WebElement apply(WebDriver d) {				return d.findElement(By.id("eeda-table"));			}		});		assertTrue(myDynamicElement != null);	}	@Test	public void testExternalUserEditAndSave() {		LoginPage signInPage = new LoginPage(selenium);		HomePage homePage = signInPage.loginValidUser("demo", "123456");		ClientListPage listPage = homePage.openPropertyClientList();		ClientPage clientPage = listPage.openEditClient();		clientPage.inputClientAndSave();		WebElement myDynamicElement = (new WebDriverWait(driver, 15)).until(new ExpectedCondition<WebElement>() {			public WebElement apply(WebDriver d) {				return d.findElement(By.id("eeda-table"));			}		});		assertTrue(myDynamicElement != null);	}	@Test	public void testExternalUserCreate() {		LoginPage signInPage = new LoginPage(selenium);		HomePage homePage = signInPage.loginValidUser("demo", "123456");		ClientListPage listPage = homePage.openPropertyClientList();		ClientPage clientPage = listPage.openNewClient();		clientPage.inputClientAndSave();		WebElement myDynamicElement = (new WebDriverWait(driver, 15)).until(new ExpectedCondition<WebElement>() {			public WebElement apply(WebDriver d) {				return d.findElement(By.id("eeda-table"));			}		});		assertTrue(myDynamicElement != null);	}	@After	public void tearDown() throws Exception {		selenium.stop();	}}